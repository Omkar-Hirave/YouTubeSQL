/*
Find the room numbers that are searched most number of times .
Output the room type alongside the number of searches for it .
If the filter for room types has more than one room type , 
consider each unique room type as a separate row.
Sort the result based on the number of searches in descending order */

--CREATING THE TABLE AND INSERTING THE VALUES
create table airbnb_searches_3108 
(
user_id int,
date_searched date,
filter_room_types varchar(200)
);
insert into airbnb_searches_3108 values
(1,'2022-01-01','entire home,private room')
,(2,'2022-01-02','entire home,shared room')
,(3,'2022-01-02','private room,shared room')
,(4,'2022-01-03','private room');

--DISPLAYING THE TABLE VALUES
SELECT * FROM airbnb_searches_3108;
+---------+---------------+--------------------------+
| user_id | date_searched | filter_room_types        |
+---------+---------------+--------------------------+
|       1 | 2022-01-01    | entire home,private room |
|       2 | 2022-01-02    | entire home,shared room  |
|       3 | 2022-01-02    | private room,shared room |
|       4 | 2022-01-03    | private room             |
+---------+---------------+--------------------------+
4 rows in set (0.01 sec)

/*The Solution is */
WITH CTE_rooms AS (
SELECT  
SUM(CASE WHEN filter_room_types LIKE '%entire%' THEN 1 END) AS count_of_entire_rooms 
,SUM(CASE WHEN filter_room_types LIKE '%private%' THEN 1 END) AS
  count_of_private_rooms
,SUM(CASE WHEN filter_room_types LIKE '%shared%' THEN 1 END) AS
  count_of_shared_rooms
FROM airbnb_searches_3108
)
SELECT 'entire room' AS rooms , count_of_entire_rooms AS cnt FROM CTE_rooms
UNION ALL
SELECT 'private room' AS rooms , count_of_private_rooms AS cnt
FROM CTE_rooms
UNION ALL
SELECT 'shared room' AS rooms , count_of_shared_rooms AS cnt 
FROM CTE_rooms 
ORDER BY cnt DESC 

